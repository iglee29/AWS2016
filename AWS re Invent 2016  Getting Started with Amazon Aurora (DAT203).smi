<SAMI>
<HEAD>
<TITLE>Hanbange 3.0 - (C) Breadu Soft 2008</TITLE>
<STYLE TYPE="text/css">
<!--
P { margin-left:8pt; margin-right:8pt; margin-bottom:2pt;
    margin-top:2pt; font-size:14pt; text-align:center;
    font-family:굴림, Arial; font-weight:normal; color:white;
    background-color:black; }
.KRCC { Name:한국어; lang:ko-KR; SAMIType:CC; font-size:11pt;}
#STDPrn { Name:Standard Print; }
#LargePrn { Name:Large Print; font-size:11pt; }
#SmallPrn { Name:Small Print; font-size:9pt; }
-->
</STYLE>
</HEAD>
<BODY>
<SYNC Start=0><P Class=KRCC>해당 자막은 AWS 채널사인 "솔트웨어(주)"의 후원으로 "MySQL PowerGroup"(cafe.naver.com/mysqlpg)에서 제작하였습니다.
<SYNC Start=5919><P Class=KRCC>출처를 밝힌 자막수정은 허용됩니다.
<SYNC Start=10610><P Class=KRCC>시작하기에 앞서, 먼저 간단하게 손을 들어보겠습니다.
<SYNC Start=10610><P Class=KRCC>Aurora 프레젠테이션에 참석한 적이 있는 사람이 얼마나 되나요?
<SYNC Start=18810><P Class=KRCC>좋습니다.그렇게 많지 않군요.
<SYNC Start=20380><P Class=KRCC>그럼, Aurora를 전에 사용해본 적이 있는 사람은 얼마나 되나요?
<SYNC Start=24520><P Class=KRCC>전에 봤던 것 보다 더 많은 사람들이 보이는군요. 좋습니다.

<SYNC Start=28930><P Class=KRCC>저는 데반잔 사하이고, 아마존 총괄 책임자입니다.
<SYNC Start=33900><P Class=KRCC>저는 또한 오늘 여기에 Ticketmaster에서 온 린다 슈가 저와 함께 할 수 있어 기쁩니다.
<SYNC Start=38810><P Class=KRCC>린다는 Ticketmaster의 수석 아키텍트이고, 데이터베이스 분야에서 20년 동안 일해왔습니다.
<SYNC Start=45100><P Class=KRCC>린다는 Aurora와 함께 앞으로 어떠한 문제없이 또 다른 20년을 더 할 수 있을 거라고 기대하고있습니다.

<SYNC Start=54000><P Class=KRCC>이것은 오늘의 아젠다입니다.
<SYNC Start=56830><P Class=KRCC>첫번째, 저는 우리가 어떻게 약 5년 전 이 프로젝트를 시작했는지에 대한 역사에 대해 조금 말해보겠고,
<SYNC Start=64170><P Class=KRCC>그리고 다양한 여러가지 디자인 원리들과 어떻게 우리가 클라우드의 연관된 데이터베이스를 재구상해 왔는지 보여드리겠습니다.
<SYNC Start=71110><P Class=KRCC>그리고, 우리는 Aurora에 대한 기본적인 것들, 차별적인 요소들, 사용사례, 소유비용 등 모든 것들에 대해 이야기하겠습니다.
<SYNC Start=81980><P Class=KRCC>그리고나서, 린다에게 차례를 넘기겠고, 린다는 Aurora와의 Ticketmaster 경험에 대해 이야기하겠습니다.
<SYNC Start=87000><P Class=KRCC>Ticketmaster는 Aurora의 얼리어답터이고, 많은 어플리케이션들에 사용해왔습니다.
<SYNC Start=91000><P Class=KRCC>그리고 린다는 몇가지 훌륭한 것들을 나눌 것입니다.

<SYNC Start=94000><P Class=KRCC>약간의 히스토리를 말씀드리면
<SYNC Start=97820><P Class=KRCC>아시다시피 우리는 이 프로젝트를 5년전에 시작하였고,우리는 클라우드의 새로운 관계형 데이터베이스를 만드는 것을 살펴보고 있었습니다.
<SYNC Start=105950><P Class=KRCC>우리가 리서치를 했고 그것에 대해 더 깊게 들여보았을 때, 우리는 RDBMS는 19세기 캘리포니아의 IBM 연구소에서 디자인 되었고,
<SYNC Start=118100><P Class=KRCC>그때에는 주된 메인 프레임이었다는 것을 깨달았습니다.
<SYNC Start=120910><P Class=KRCC>구조를 살펴본다면, 그것은 사실상 메인 프레임 아키텍처에 잘 맞았습니다.
<SYNC Start=125000><P Class=KRCC>멀티 레이어와 다른 기능들이 있는 한가지 커다란 구조체였습니다.
<SYNC Start=130000><P Class=KRCC>SQL 프로세싱 레이어, 트랜잭션 레이어, 캐시 레이어, 로깅 레이어가 있었습니다.
<SYNC Start=135000><P Class=KRCC>하지만 지난 그것들은 모두 지금의 메인 프레임 구조물로 예상하는 거대한 단일 구조체의 부분들입니다.
<SYNC Start=140560><P Class=KRCC>지난 20년 동안, 많은 변화가 있지 않았습니다.
<SYNC Start=144900><P Class=KRCC>달라보이긴 하지만 우리가 본질적으로 하는 것은 같기 때문입니다.
<SYNC Start=148500><P Class=KRCC>한가지 같은 구조체를 이용하여 다수의 인스턴스들을 만들고, 다른 종류들의 클러스터를 만듭니다.
<SYNC Start=157000><P Class=KRCC>데이터베이스 유저들에게 매우 인기있는 한가지를 예로 들자면, 샤딩이 있습니다.
<SYNC Start=161800><P Class=KRCC>데이터를 파티션으로 나누고 그것들을 다른 인스턴스에 넣은 후, 클러스터를 만듭니다.
<SYNC Start=167000><P Class=KRCC>어플리케이션은 어떤 특정한 인스턴스로 갈 것인지 결정하게 됩니다.
<SYNC Start=172000><P Class=KRCC>그래서 클러스터링 연결은 어플리케이션 레이어에서 일어나고, 실제로는 클러스터를 공유하지 않습니다.
<SYNC Start=172000><P Class=KRCC>Galera가 연결이 SQL 레이어에서 일어나는 예라고 할 수 있습니다.
<SYNC Start=185710><P Class=KRCC>그리고, 여러분이 잘 아는 클러스터를 공유하는 예로 오라클 RAC의 연결이 스토리지 레이어와 캐시 레이어에서 일어난다는 것입니다.
<SYNC Start=197190><P Class=KRCC>하지만 이 모든 것들이 다른 레이어에서 다른 기능을 가진 하나의 구조체 라는 것은 바뀌지 않았습니다.
<SYNC Start=207000><P Class=KRCC>우리는 클라우드에 맞춰 아키텍쳐를 바꾸고 싶었습니다. 거기에는 집중해야 할 세 가지가 있습니다.
<SYNC Start=214000><P Class=KRCC>한가지는 클라우드 환경에서 예상하는 대로 Scale-Out 과 분산 디자인입니다.
<SYNC Start=220510><P Class=KRCC>두번째, 우리는 서비스 지향적인 아키텍처를 원했습니다.
<SYNC Start=224900><P Class=KRCC>이미 클라우드에서 가능한 많은 서비스가 있었기에, 우리는 그것들을 다시 만들 필요가 없었고, 그것들을 이용할 수 있었습니다.
<SYNC Start=230000><P Class=KRCC>같은 시간에 더 빨리 개발하고 더 나은 서비스를 즉각적으로 제공할 수 있었습니다.
<SYNC Start=236000><P Class=KRCC>세번째, 데이터베이스 디자이너들과 관리자들은 많은 시간을 기초적인 것들을 하는데 보냅니다.
<SYNC Start=245000><P Class=KRCC>우리는 관리자들이 그들에게 중요한 일에 집중할 수 있도록 기초적인 것들을 자동화 하고 싶었습니다.

<SYNC Start=249700><P Class=KRCC>자, 이제 조금 더 자세히 들여다보겠습니다.
<SYNC Start=252550><P Class=KRCC>Scale-out, 분산, 내결함성, 멀티테넌트 아키텍처. 그게 무슨 뜻일까요?
<SYNC Start=258350><P Class=KRCC>이것이 aurora 데이터베이스가 어떻게 생겼는지 대략적인 개요입니다.
<SYNC Start=232600><P Class=KRCC>로깅 레이어와 스토리지 레이어를 같이 쓰고, 그것이 광범위하게 분산되고 scale-out되고 멀티테넌트를 만드는 것을 알아채셨나요?
<SYNC Start=270800><P Class=KRCC>그래서 우리의 스토리지 레이어는 세가지 다른 AZ에 스트라이핑 분산되어 있고, AZ들은 수백개의 수천개의 스토리지 노드에 스트라이핑되어 있습니다.
<SYNC Start=278700><P Class=KRCC>우리가 만든 데이터베이스 엔진과 스토리지 레이어의 사이의 인터페이스는 iSCSI 나 fibre channel 이나 NFS 처럼 기존 표준 스토리지 프로토콜이 아닙니다.
<SYNC Start=291000><P Class=KRCC>이 데이터베이스 인터페이스는 redo log를 데이터 엔진에서 스토리지 레이어로 보내며, 이것이 근본적인 혁신중에 하나입니다.
<SYNC Start=301170><P Class=KRCC>여기서 세가지 주목할 만한 것이 있습니다.
<SYNC Start=303030><P Class=KRCC>스토리지 볼륨을 보면, 우리는 스토리지 볼륨에서 기가바이트 단위를 떼어내고, 그것들을 다양한 다른 노드들로 분산시킵니다.
<SYNC Start=309100><P Class=KRCC>6개의 복사본을 만드는데, 각 AZ에 2개씩 저장하기 때문에, 수백의 노드들에 스트라이핑으로 쓸 수 있게 해줍니다.
<SYNC Start=324850><P Class=KRCC>6개의 복사본이 있기 때문에 내결함성을 보장합니다.
<SYNC Start=328420><P Class=KRCC>스토리지와 데이터베이서 레이어 사이의 인터페이스는 스토리지 프로토콜보다 가벼운 Redo Log 스트림이기 때문에 성능도 보장합니다.

<SYNC Start=338400><P Class=KRCC>두번째로 이야기할 것은 클라우드 에코시스템의 영향력입니다.
<SYNC Start=344400><P Class=KRCC>우리는 클라우드에서 가용한 모든 서비스들의 장점을 가지고 있습니다.
<SYNC Start=350000><P Class=KRCC>예를 들어 Aurora는 Lamda 와 통합 되어집니다.
<SYNC Start=353719><P Class=KRCC>그래서 프로시저나 트리거를 통해 Lamda 이벤트를 발생시키거나 만들어낼 수 있습니다.
<SYNC Start=360650><P Class=KRCC>Aurora를 계기로 우리는 S3를 광범위하게 이용할 수 있습니다.
<SYNC Start=363610><P Class=KRCC>우리는 S3에서 데이터를 로딩할 수 있습니다.
<SYNC Start=365000><P Class=KRCC>예를 들어 데이터와 테이블을 S3에 입력할 수 있고, 데이터베이스에서 가져올 수 있습니다.
<SYNC Start=370300><P Class=KRCC>우리는 S3를 이용해서 백업과 스냅샷을 합니다.
<SYNC Start=373140><P Class=KRCC>직접 그렇게 할 필요가 없습니다.
<SYNC Start=376380><P Class=KRCC>저는 데이터베이스 접근 제어를 관리하기 위해 IAM role을 씁니다.
<SYNC Start=382680><P Class=KRCC>우리는 시스템 매트릭스와 감사로그를 업로드 하기 위해 cloudwatch를 이용합니다.
<SYNC Start=387270><P Class=KRCC>그래서 이것들이 우리가 빨리 그리고 더 좋은 서비스들을 만들기 위해 이용하는 모든 서비스들입니다.

<SYNC Start=394970><P Class=KRCC>세번째로 만약 데이터베이스 관리자들의 일상을 본다면,
<SYNC Start=401000><P Class=KRCC>그들이 정말로 집중하고 싶은 것은 스키마디자인, 쿼리제작, 쿼리최적화입니다.
<SYNC Start=406500><P Class=KRCC>하지만 불행하게도 그들이 하기 싫지만 해야만 하는 많은 것들이 있습니다.
<SYNC Start=411350><P Class=KRCC>예를 들어 fail-over 관리, 백업과 복구, 보안과 규정, 모니터링, 반복적인 운영작업과 패치 등이 있습니다.
<SYNC Start=421800><P Class=KRCC>그래서 우리가 한 것은 데이터베이스 관리자들이나 데이터베이스 이용자들이 하고 싶지 않아 하는 모든 기능들을 자동화했고, 그것들을 관리 서비스의 부분으로 만들었습니다.
<SYNC Start=433410><P Class=KRCC>그래서, 데이터베이스 관리자들과 이용자들은 그들이 정말로 신경쓰는 부분들, 스키마디자인, 쿼리제작, 쿼리최적화 등에 집중할 수 있습니다.

<SYNC Start=445400><P Class=KRCC>이런 것 들이 이끌어낸 것은 무엇일까요?
<SYNC Start=449000><P Class=KRCC>이것은 오늘날의 아마존 Aurora가 어떤 것인지에 대한 요약입니다.
<SYNC Start=453100><P Class=KRCC>그것은 Oracle이나 SQL Server등과 같은 속도와 고급의 상용 데이터베이스의 속도와 가용성을 가지고 있습니다.
<SYNC Start=458700><P Class=KRCC>그것은 간소화되었고 MySQL 같이 오픈 소스 데이터베이스의 비용효율성을 가지고 있습니다.
<SYNC Start=464500><P Class=KRCC>덧붙이자면 그것은 MySQL과 호환될 수 있습니다. 그래서 우리는 모든 MySQL 어플리케이션들을 가져올 수 있고, 그것들을 코드 한 줄 바꿀 필요도 없이 가져올 수 있습니다.
<SYNC Start=474010><P Class=KRCC>가격결정 모델로서 그것은 단순합니다.
<SYNC Start=477000><P Class=KRCC>그것들은 모두 관리 서비스들로 전달됩니다.
<SYNC Start=479670><P Class=KRCC>우리가 고객 채택면에서 어떻게 하고 있을까요?
<SYNC Start=485050><P Class=KRCC>자랑스러운 부모처럼 저는 모든 사람들에게 이것에 대해 말할 기회를 항상 갖습니다.
<SYNC Start=490960><P Class=KRCC>이것은 AWS 역사상 가장 빠르게 성장하는 서비스이고, 
<SYNC Start=496300><P Class=KRCC>우리의 레퍼런스들은 여러분이 아는 익스페디아, GE, 나스닥, Ticketmaster 등이 있습니다.
<SYNC Start=502000><P Class=KRCC>물론 이것을 이용하는 많은 고객들이 있고, 우리는 그들을 공개적인 레퍼런스로 만들려고 노력하고 있습니다.
<SYNC Start=507440><P Class=KRCC>Aurora는 2/3의 상위 100 AWS 고객들에 의해 이용되고 있습니다.
<SYNC Start=513500><P Class=KRCC>우리는 출시된지 15개월밖에 되지 않았지만, 상위 10 게임 고객들 중 8개는 Aurora를 이용하고 있습니다.

<SYNC Start=526000><P Class=KRCC>그래서 이 고객들은 누구일까요? 그리고 Aurora로 옮기는 어플리케이션들은 어떤 것일까요?
<SYNC Start=533000><P Class=KRCC>일반적으로 MySQL 엔진을 이용하다가 Aurora로 옮기는 고객들 중 2가지 유형의 고객들을 볼 수 있습니다.
<SYNC Start=543000><P Class=KRCC>사실 매우 간단합니다.더 높은 성능과 향상된 가용성과 내구성, 비용절감을 원하는 고객입니다.
<SYNC Start=553000><P Class=KRCC>예를 든다면, 이전하기 매우 쉽고 변경해야 할 어플리케이션도 없습니다. RDS MySQL, EC2 MySQL 또는 on-premise MySQL 에서 이전할 수 있는 간단한 방법이 있습니다.
<SYNC Start=566000><P Class=KRCC>또한 상용 엔진을 이용하다가 약간 다른 가치배분의 이유로 Aurora로 옮기는 고객들도 있습니다.
<SYNC Start=572400><P Class=KRCC>첫번째 효과는 상용 데이터베이스 가격의 1/10 입니다.
<SYNC Start=578000><P Class=KRCC>그리고 상용 데이터베이스를 이용하는 많은 사람들이 봉착하는 라이센스도 없습니다.
<SYNC Start=582900><P Class=KRCC>그것은 AWS 클라우드 에코시스템 속에 매우 잘 통합되어 있습니다.
<SYNC Start=588050><P Class=KRCC>그것은 비교할만한 성능과 가용성을 지닙니다. 그리고 몇몇의 사례들에서는 상용 엔진들보다 더 나은 가용성을 지닙니다.
<SYNC Start=594000><P Class=KRCC>이관하는 것이 MySQL에서 이관하는 것처럼 간단하진 않지만, Aurora는 MySQL과 호환되기 때문에, 우리는 이관 도구를 개발했고, AWS와 파트너사에서 이관을 위해 지원되는 서비스들이 있습니다.

<SYNC Start=611000><P Class=KRCC> 이제 조금 더 자세히 들어가겠습니다. Aurora는 빠릅니다.
<SYNC Start=614780><P Class=KRCC> 얼마나 빠르냐면 MySQL보다 5배까지 빠릅니다
<SYNC Start=618050><P Class=KRCC> 보시면, 이것은 많은 사람들이 사용하는 벤치마크인 sysbench 성능 수행 결과입니다
<SYNC Start=627210><P Class=KRCC> MySQL 5.6과 최신 버전인 5.7의 읽기와 쓰기당 비교한 것입니다
<SYNC Start=634000><P Class=KRCC> 결과를 비교해보면, 32 core와 244GB memory의 R3.8XL에서 Aurora는 대략 초당 약 120,000 쓰기를 보였습니다
<SYNC Start=649100><P Class=KRCC> MySQL 5.6과 5.7에서는 약 5분의 1 정도인 약 초당 20~25 k 쓰기보다 약간 못 미치는 정도를 보였습니다
<SYNC Start=661000><P Class=KRCC> 그리고 보는 것처럼, MySQL 5.6과 5.7에는 그다지 많은 차이가 없습니다
<SYNC Start=665300><P Class=KRCC> 읽기에서는 초당 약 600,000 정도를 보이고, MySQL과 비교해 보면, 약 5배 정도 됩니다
<SYNC Start=676210><P Class=KRCC> 이것은 모두 처리량 숫자들입니다
<SYNC Start=679240><P Class=KRCC> 이것은 재현하기 쉽습니다.여러분이 가서 읽어 보시고 이 실험을 스스로 할 수 있도록 white paper를 제공하고 있습니다.

<SYNC Start=687275><P Class=KRCC> 하지만, 많은 사람들은 “벤치마크는 벤치마크일 뿐입니다. 이것은 실제 어플리케이션 부하가 아닙니다. 더 말해주세요.” 라고 말할 수 있습니다
<SYNC Start=694770><P Class=KRCC> 그래서 우리는 같은 부하이지만 벤치마크가 아닌 스케일링 실험들을 다시 해보았습니다
<SYNC Start=701000><P Class=KRCC> 그래서 가끔 MySQL과 많은 다른 데이터베이스에서 문제가 되기 때문에, 커넥션의 개수들을 스케일 했습니다
<SYNC Start=710000><P Class=KRCC> 50부터 500 그리고 5000까지 커넥션을 스케일 했습니다. 이 숫자들을 전부 읽진 않겠지만, MySQL과 비교했을 때, 5배의 성능까지 얻을 수 있습니다
<SYNC Start=722900><P Class=KRCC> 우리는 10부터 1000까지, 1000부터 10,000까지 테이블의 개수를 스케일 했습니다
<SYNC Start=729400><P Class=KRCC> 사실 우리의 고객들은 Aurora의 다양한 어플리케이션을 위해 수백, 수천의 테이블들을 실행합니다
<SYNC Start=737800><P Class=KRCC> Aurora 와 EBS 볼륨에서 실행되는 MySQL, 로컬 SSD에서 돌아가는 MySQL 을 비교해 보았습니다
<SYNC Start=746000><P Class=KRCC> MySQL과 비교했을 때 11배까지 더 나은 성능을 얻을 수 있었습니다
<SYNC Start=750000><P Class=KRCC> 그러고 나서, 우리는 데이터베이스 사이즈를 증가시켰습니다
<SYNC Start=752500><P Class=KRCC> 그래서 우리는 1GB에서 시작해서 10GB, 100GB까지 늘렸습니다.
<SYNC Start=757000><P Class=KRCC> 사실 100GB 까지는 Cache에 들어가고, 1TB 실험은 캐쉬에 다 들어가지 않기 때문에, 이것은 메모리 상의 부하였습니다
<SYNC Start=767000><P Class=KRCC> 예상할 수 있듯이 1 TB는 성능 수치가 낮았습니다
<SYNC Start=772000><P Class=KRCC> 하지만 MySQL와 비교해보면, 훨씬 나은 성능을 보여줍니다
<SYNC Start=776800><P Class=KRCC> 그것은 우리가 생각했던 것보다 더 좋은 결과여서, 우리의 벤치마크가 무언가가 잘못 되었다고 생각했습니다
<SYNC Start=781000><P Class=KRCC> 그래서 우리는 다른 벤치마크, TPC-C를 가지고 다시 시도해보았습니다
<SYNC Start=784000><P Class=KRCC> 사실 데이터 사이즈가 80GB의 메모리 바운드와 데이터 사이즈 800GB의 스토리지 바운드 TPC-C에서도 더 나은 성능을 볼 수 있었습니다
<SYNC Start=798000><P Class=KRCC> 이제 이것은 우리의 벤치마크가 아닙니다
<SYNC Start=801200><P Class=KRCC> Aurora의 더 나은 성능을 알린 많은 사람들이 있습니다.
<SYNC Start=804000><P Class=KRCC> 이것은 게임 고객들 중 하나입니다
<SYNC Start=806500><P Class=KRCC> 덧붙이자면, 게임은 사람들이 Aurora를 많이 사용하는 업계 중 하나입니다
<SYNC Start=810000><P Class=KRCC> 이것은 다수의 AZ를 이용하여 r3.4XL에서 그들의 어플리케이션을 실행하는 것입니다
<SYNC Start=817000><P Class=KRCC> 보시다시피 왼쪽 부분은 MySQL를 이용한 응답 시간이고, 오른쪽 부분은 Aurora를 이용한 응답 시간 입니다
<SYNC Start=831000><P Class=KRCC> 응답시간은 줄어듭니다
<SYNC Start=832000><P Class=KRCC> 응답시간은 15 밀리세컨드에서 5 밀리세컨드로 줄어들고 대략 3배정도의 개선이 있습니다

<SYNC Start=840000><P Class=KRCC> Aurora deep dive 세션이 있을 것이고, 거기서 우리는 성능을 향상시키기 위해 우리가 실제로 어떤 다른 것들을 했는지 설명할 것 입니다
<SYNC Start=850000><P Class=KRCC> 그 몇가지를 맛보기로 보여드리겠습니다
<SYNC Start=852000><P Class=KRCC> 우리를 더 뛰어나게 만들어준 것 중에 하나는, 일량을 줄인 부분입니다.
<SYNC Start=857000><P Class=KRCC> 우리는 더 적은 I/O 를 합니다
<SYNC Start=858300><P Class=KRCC> 우리가 더 적은 I/O를 하는 이유는 우리는 전통적인 스토리지 시스템을 이용하지 않습니다
<SYNC Start=863500><P Class=KRCC> 우리는 이 데이터베이스 엔진에서 스토리지 노드로 더티 페이지를 보내지 않는 파트너 스토리지 시스템을 이용합니다
<SYNC Start=870000><P Class=KRCC> 우리는 단지 Redo Log 기록들만 보낼 뿐이고, 데이터 페이지를 스토리지 엔진에서 스스로 만들게 합니다
<SYNC Start=879000><P Class=KRCC> 이것은 그것의 예시입니다. 왼쪽편이 replica가 있는 MySQL입니다
<SYNC Start=885800><P Class=KRCC> Log write, binlog write, double write buffer, frm 파일 등의 쓰기 작업이 필요합니다
<SYNC Start=894000><P Class=KRCC> 그리고 오른쪽에는 Aurora가 하는 것입니다. 로그 쓰기만 필요할 뿐입니다
<SYNC Start=899000><P Class=KRCC> Aurora가 실제로 더 많은 트래픽을 일으키는 한 부분이 있습니다
<SYNC Start=903000><P Class=KRCC> 무언가를 쓸 때, 우리는 6개의 다른 패킷을 매번 생성합니다. 데이터의 6 복사본을 가지고 있기 때문입니다
<SYNC Start=910000><P Class=KRCC> 하지만 많은 최적화가 되어 있습니다
<SYNC Start=913000><P Class=KRCC> 간단하게 설명하게 하기위해 30분동안 MySQL에서 sysbench를 실행했고, Aurora에서 실행하였습니다
<SYNC Start=924000><P Class=KRCC> MySQL에서는, 저기에 있는 숫자 1에 해당하는 수치만보면 30분 동안 78만 트랜잭션이 있었고, 대략적으로 트랜잭션 당 약 7.4 IO가 있었습니다
<SYNC Start=939000><P Class=KRCC> Aurora의 경우, 30분 동안 우리는 2천7백만 트랜잭션이 있었고, 약 한 트랜잭션당 0.95 IO가 있었습니다
<SYNC Start=948000><P Class=KRCC> 이것은 우리가 하는 여섯 개의 복제를 포함한 것입니다
<SYNC Start=951300><P Class=KRCC> 그래서 35배 더 많은 퍼포먼스와 7.7배 더 적은 IO를 얻을 수 있습니다
<SYNC Start=956700><P Class=KRCC> 물론 우리가 하는 다른 것들도 있습니다
<SYNC Start=960000><P Class=KRCC> deep dive 세션에서 우리가 사용하는 다른 기술들을 설명할 것입니다

<SYNC Start=964660><P Class=KRCC> 우리가 처음 서비스를 출시했을 때부터 읽기 성능 향상, 쓰기 성능 향상, 메타 데이터 액세스를 향상시키기 위해 우리가 해온 많은 다른 것들이 있습니다
<SYNC Start=977000><P Class=KRCC> 모든 자세한 것들에 대해 들어가진 않겠으나, 그것에 대해 구할 수 있는 많은 문서들이 있습니다
<SYNC Start=984000><P Class=KRCC> 몇 개의 예시를 보여드리기 위해, 어떻게 사람들이 이렇게 더 나은 성능을 활용할까요?
<SYNC Start=989000><P Class=KRCC> 한가지 일반적인 사용 사례는 다수의 MySQL 샤드를 가져다가 한 대의 Aurora에 통합하는 것입니다
<SYNC Start=999000><P Class=KRCC> 어떨 때는 같은 사이즈이고, 어떨 때는 더 큰 사이즈입니다
<SYNC Start=1002000><P Class=KRCC>특정한 사례를 보면, 어떤 고객은 다양한 어플리케이션이 동작하는 29개의 MySQL 샤드들을 가지고 있었고, 하나의 Aurora r3.4XL에 통합해서 실행하였습니다
<SYNC Start=1014000><P Class=KRCC>그것은 여전히 30퍼센트 정도의 리소스만 사용하면서 유지되고 있으며 확장 가능한 공간이 많이 남아 있습니다
<SYNC Start=1021000><P Class=KRCC>한가지 저를 놀랍게 한 것은, 어떤 고객들은 NoSQL 부하를 Aurora로 이동한다는 것입니다
<SYNC Start=1028200><P Class=KRCC>거기에는 두가지 이유가 있었습니다
<SYNC Start=1030000><P Class=KRCC>한가지는 MySQL 호환이기 때문에 인터페이스와 트랜잭션 성향은 매우 다른 NoSQL보다 Aurora를 이용하는게 훨씬 쉬웠습니다
<SYNC Start=1040000><P Class=KRCC>또 흥미로웠던 것은 사람들이 실제로 Aurora로 가면서 Aurora의 I/O 가격이 훨씬 낮았기 때문에 돈을 절약하였습니다
<SYNC Start=1052000><P Class=KRCC>NoSQL에서 일어난 몇 가지들이 있습니다
<SYNC Start=1054000><P Class=KRCC>만약 큰 테이블을 가지고 있다면, 그것들은 파티션으로 나누고, 그런 다음 I/O 는 가지고 있는 모든 파티션 테이블로 분할될 것입니다
<SYNC Start=1064000><P Class=KRCC>만약 핫 파티션이 하나 있다면, 그 파티션에 맞춰 I/O 요구사항을 맞춰야 할 것입니다
<SYNC Start=1073000><P Class=KRCC>Aurora의 경우 hot spot management로 자동적으로 관리 하므로, 핫 파티션 문제가 없습니다

<SYNC Start=1079000><P Class=KRCC>두번째, provisioned IO에 대해 청구하지 않고, 사용하는 I/O 만큼만 청구하므로, 많은 돈을 절약할 수 있습니다
<SYNC Start=1087000><P Class=KRCC>특정한 사례를 하나 들어보면, 이름을 말씀드릴 수는 없지만 어떤 큰 SNS 회사는 NoSQL 솔루션에서 Aurora로 옮김으로써 40 퍼센트의 운영비용을 줄였습니다

<SYNC Start=1103000><P Class=KRCC>가용성을 좀 살펴보겠습니다. 성능은 데이터 베이스가 올라가 있을 때만 문제됩니다. 그렇지 않으면 문제되지 않습니다
<SYNC Start=1111800><P Class=KRCC>그래서 가용성면에서 우리는 어떻게 할까요? 제가 잠시 말씀드렸던 것처럼, 이제까지 해왔던 것 중 하나는 우리가 쓰는 6개의 스토리지 복제입니다
<SYNC Start=1120000><P Class=KRCC>우리는 6개의 데이터 복사본을 보관하는데, 도심에 있는 데이터 센터인 AZ마다 각각 2개의 복사본을 둡니다
<SYNC Start=1132000><P Class=KRCC>우리는 6개 중 4개의 쓰기 쿼럼을 사용합니다. 뜻인즉, 6개의 노드로 데이터를 보내고 4개로부터 응답을 받으면 데이터들이 안정되었다고 가정합니다
<SYNC Start=1140000><P Class=KRCC>어떤 이유에서든지 다른 2개의 복사본이 응답이 늦거나 작업이 일어나지 않을 때는, 캐치업을 위해 스토리지 노드들 사이에서 위해 백그라운드 peer-to-peer 복제를 합니다
<SYNC Start=1152000><P Class=KRCC>읽기 쿼럼은 여섯 중 세 개 입니다
<SYNC Start=1155000><P Class=KRCC>만약 어떤 특정한 상황에 AZ 전체 장애가 있거나 데이터 센터 전체 장애가 있어도, 여전히 완전한 읽기와 쓰기 가용성이 유지됩니다
<SYNC Start=1160000><P Class=KRCC>만약 3개가 다운된 상황이라면 예를 들어 어느 데이터 센터의 노드 2개와 다른 데이터 센터의 노드 1개가 내려가도 여전히 완전한 읽기 가용성이 유지됩니다
<SYNC Start=1177000><P Class=KRCC>지난15년간 운영해오면서 데이터 관점에서 스토리지 가용성은 100%였습니다.
<SYNC Start=1184000><P Class=KRCC>Replica로 넘어가겠습니다
<SYNC Start=1190000><P Class=KRCC>분산 스토리지 아키텍쳐를 공유하기 때문에 읽기 replica 를 15개까지 제공하며, 이들은 3개의 AZ로 분산시킬 수 있습니다
<SYNC Start=1202000><P Class=KRCC>각 replica는 마스터가 장애일 때 마스터로 승격될 수 있습니다
<SYNC Start=1207000><P Class=KRCC>자동 모니터링을 통해서 마스터가 장애가 나면 자동으로 replica 중 하나를 마스터로 전환합니다
<SYNC Start=1215000><P Class=KRCC>어떤 순서로 전환할지 정할 수도 있습니다
<SYNC Start=1220000><P Class=KRCC>또한 읽기 replica 의 endpoint를 제공합니다
<SYNC Start=1224000><P Class=KRCC>읽기 전용의 어플리케이션이 있다면, 읽기 end-point로 보낼 수 있고, 해당 end-point의 replica간의 로드밸런싱 처리를 할 수 있습니다.
<SYNC Start=1236000><P Class=KRCC>읽기 replica에 대해 말씀드려야 하는 것 중 하나는, 복제 프로토콜은 MySQL과 다르게 binlog 를 사용하지 않고, 복제를 가볍게 만들어주는 redo log 를 사용한다는 것입니다.
<SYNC Start=1250000><P Class=KRCC>그렇게 때문에 읽기 replica와 mater 간의 Slave Lack 은 대략 10밀리초 정도되지만 MySQL에서는 몇초, 몇분입니다
<SYNC Start=1260000><P Class=KRCC>한 여행물류 업계의 고객이 어떻게 이런 이점을 활용하는지 보겠습니다
<SYNC Start=1270000><P Class=KRCC>이 고객은 트랜잭션 데이터는 마스터에 보관합니다
<SYNC Start=1275000><P Class=KRCC>천 명의 내부 직원이 보고서나 분석을 위한 작업이 필요할 때는 읽기 replica를 사용합니다
<SYNC Start=1285000><P Class=KRCC>그렇게 하는 이유는 수평적 확장이 가능하기 때문입니다. 확장이 필요하면 빠르게 읽기 replica를 더 세팅하면 됩니다
<SYNC Start=1295000><P Class=KRCC>그리고 replica의 lag이 매우 낮은 수준이기 때문에, 분석을 실시간 데이터로 하는 것과 마찬가지입니다
<SYNC Start=1300000><P Class=KRCC>트랜잭션 시스템에서 데이터웨어하우스로 데이터를 옮기고 난 후, 분석 단계를 할 필요가 없습니다

<SYNC Start=1310000><P Class=KRCC>이제 저는 읽기 replica가 마스터로 승격될 수 있다는 것에 대해 이야기 하겠습니다
<SYNC Start=1317000><P Class=KRCC>만약 Mariadb 어플리케이션 드라이버를 쓰신다면, 그것은 대략적으로 15 초가 걸립니다
<SYNC Start=1324000><P Class=KRCC>어떤 다른 스탠다드 드라이버를 쓰시는 중이라면, 그것은 약 35에서 40초가 걸립니다
<SYNC Start=1330000><P Class=KRCC>Failover를 보면, 장애를 감지하는데 시간을 소비합니다
<SYNC Start=1336000><P Class=KRCC>Heartbeat를 매초 모니터링 하는데, heartbeat 이 5번 실패나면 마스터가 죽었다고 가정하고, 그런 다음 failover 프로세스를 시작합니다
<SYNC Start=1351000><P Class=KRCC>Failover는 동시에 이뤄지는 두 가지 작업으로 이루어집니다
<SYNC Start=1358000><P Class=KRCC>하나는 데이터베이스 복구이고, 두번째는 cname 전파인데, 어플리케이션에게 새로운 마스터를 명시적으로 로깅하지 않아도 누가 새로운 마스터인지를 알기 원하기 때문입니다
<SYNC Start=1372000><P Class=KRCC>그래서 DNS 전파은 약 30초가 걸립니다
<SYNC Start=1375000><P Class=KRCC>Aurora에서 복구시간은 즉각적입니다. MySQL의 경우에는 수십 초가 걸리고 가끔 수십 분이 걸리는 것에 비해 이것은 5~10초가 걸립니다
<SYNC Start=1386000><P Class=KRCC>Mariadb 드라이버를 이용하면 DNS 전파가 일어나기를 기다릴 필요가 사실은 없습니다
<SYNC Start=1392000><P Class=KRCC>Mariadb 드라이버는 마스터에서나 읽기 복제 중 하나에서 시스템 테이블을 읽어서 현재 마스터의 IP 주소를 알고 있기 때문에 DNS 전파 시간을 우회할 수 있습니다
<SYNC Start=1408000><P Class=KRCC>그래서 failover를 15초 이내에 할 수 있고, 제 생각에 그것은 매우 놀라운 것입니다


<SYNC Start=1413000><P Class=KRCC>우리는 또한 Cross-region Read Replica 를 지원합니다.
<SYNC Start=1417000><P Class=KRCC>두 개의 Aurora 클러스터를 다른 지역들에 만들 수 있고, 재난 복구를 위해 세팅할 수 있습니다
<SYNC Start=1425000><P Class=KRCC>만약 여러 지역에 걸쳐있는 어플리케이션이 있다면, 이것은 어플리케이션 가까이 데이터를 둘 수 있게 도와줍니다
<SYNC Start=1433000><P Class=KRCC>만약 이관을 하려고 할 때도 cross-region 복제를 이용할 수 있습니다

<SYNC Start=1440000><P Class=KRCC>또한, 우리가 작업하고 있는 새로운 가용성 feature 들중에, 특별히 기대되는 두가지 Feature 가 있습니다
<SYNC Start=1448500><P Class=KRCC>하나는 cross-region snapshot copy입니다
<SYNC Start=1451000><P Class=KRCC>이것은 재난 복구의 한가지 종류입니다
<SYNC Start=1457000><P Class=KRCC>복사나 스냅샷을 어떻게든 편하게 느끼시는 대로 매 10분이나 매 10시간 마다 다른 지역들에서 할 수 있습니다
<SYNC Start=1464000><P Class=KRCC>이것은 cross-region 복제보다 더 저렴한 재난 복구 방법입니다

<SYNC Start=1470000><P Class=KRCC>우리는 또한 cross-account snapshot sharing을 예정하고 있습니다
<SYNC Start=1475000><P Class=KRCC>많은 사람들이 우리에게 요청하는 것 중 하나는 다른 지역이나 다른 계정에서 있는 스냅샷을 복사할 수 있도록 하는 것입니다
<SYNC Start=1483000><P Class=KRCC>그것은 내부적 위협이나 자연적 재해로부터 보호해줍니다

<SYNC Start=1490000><P Class=KRCC>이제 편리성에 대해 조금 이야기 해보겠습니다
<SYNC Start=1495400><P Class=KRCC>사람들이 Aurora에 대해 정말 좋아하는 것 한가지는 스토리지 관리가 얼마나 쉬운가 입니다
<SYNC Start=1504000><P Class=KRCC>우리는 64TB 스토리지 볼륨까지 제공합니다
<SYNC Start=1508000><P Class=KRCC>하지만 어떤 것도 미리 마련할 필요가 없습니다
<SYNC Start=1510700><P Class=KRCC>기본값인 10GB 볼륨으로 시작합니다
<SYNC Start=1514000><P Class=KRCC>더 많은 데이터를 추가하면, 우리는 자동적으로 64TB까지 더 많은 스토리지를 추가합니다
<SYNC Start=1521000><P Class=KRCC>우리는 계속해서 증분백업을 하기 때문에, 백업이나 윈도우즈를 백업하는 것에 대해 걱정하실 필요가 없습니다
<SYNC Start=1528000><P Class=KRCC>원하는 만큼 많은 스냅샷을 찍을 수 있습니다
<SYNC Start=1530000><P Class=KRCC>우리가 하는 방식 때문에 이것으로부터의 성능에 영향이 없습니다
<SYNC Start=1537000><P Class=KRCC>우리는 자동으로 재스트라이핑, mirror repair, 핫 스팟 관리, 암호화를 합니다
<SYNC Start=1544000><P Class=KRCC>그래서 이 모든 것들은 스토리지 관리 관점에서 문제가 되지 않습니다
<SYNC Start=1548000><P Class=KRCC>많은 사례들에서 저는 사람들이 데이터베이스의 스토리지가 부족한 것을 걱정하는 것을 많이 봐왔습니다
<SYNC Start=1554000><P Class=KRCC>스토리지를 필요한 것보다 3배를 더 준비합니다
<SYNC Start=1557000><P Class=KRCC>우리는 그렇게 할 필요가 없습니다. 오직 사용된 것에 기초하여 청구하며, 사용한 만큼만 지불하면 됩니다.

<SYNC Start=1567000><P Class=KRCC>보안와 규정준수
<SYNC Start=1570000><P Class=KRCC>이것은 우리가 무게있게 집중한 한가지 구역입니다
<SYNC Start=1574000><P Class=KRCC>우리는 고객 관리 키를 이용하여 쉬는 동안 암호화합니다
<SYNC Start=1579000><P Class=KRCC>이것들은 모두 key management service(KMS)와 통합되어 암호화됩니다
<SYNC Start=1585000><P Class=KRCC>우리가 기본 KMS 키를 사용해서 스토리지 볼륨을 암호화할 수 있습니다
<SYNC Start=1588000><P Class=KRCC>우리는 cross-region 복제나 전달되는 모든 데이터는 SSL을 사용하여 암호화합니다
<SYNC Start=1595000><P Class=KRCC>우리는 아직 있지는 않지만, 몇 주 안에 가능할 고급 감사와 로깅 메커니즘을 가지고 있습니다
<SYNC Start=1604000><P Class=KRCC>우리는 데이터 보호를 위한 산업 규정을 가지고 있습니다
<SYNC Start=1606000><P Class=KRCC>예를 들어, 우리는 회계 산업을 위해 SOC, ISO, PCI/DSS등을 가지고 있고, 의료 산업을 위해 HIPPA/BAA로부터 승인 받았습니다.

<SYNC Start=1624500><P Class=KRCC>모니터링
<SYNC Start=1626000><P Class=KRCC>이것은 우리가 많은 시간을 보낸 부분입니다. 물론, 저는 좀 더 할 것이 있다고 생각합니다
<SYNC Start=1632000><P Class=KRCC>우리는 1초 단위로 모니터하는 50개 넘는 시스템과 OS 레벨 측정항목을 가지고 있습니다
<SYNC Start=1638000><P Class=KRCC>만약 고급 모니터링을 Aurora console에서 활성화한다면, 일반적으로 1분 단위의 cloudwatch로부터 얻는 것보다 훨씬 나은 초 단위의 시스템과 IO레벨 측정항목을 얻을 수 있습니다
<SYNC Start=1652000><P Class=KRCC>Process list를 볼 수 있고, 우리가 제공하는 데이터 로그를 cloudwatch 보내서 자신만의 모니터링 도구를 실행할 수 있습니다
<SYNC Start=1667000><P Class=KRCC>그런 예로, 제공된 데이터와 통합된 3rd party 모니터링 도구가 많이 있습니다
<SYNC Start=1675000><P Class=KRCC>다양한 다른 측정항목에 알람이나 트리거를 세팅할 수 있습니다

<SYNC Start=1681000><P Class=KRCC>우리는 Aurora로 이관하는 것을 매우 쉽게 만들려고 열심히 일합니다
<SYNC Start=1686000><P Class=KRCC>어떤 도구를 이용하는지는 어디에서 왔는지, 어디서 데이터베이스를 관리했는지에 달려있습니다
<SYNC Start=1695000><P Class=KRCC>예를 들어 만약 RDS MySQL를 실행했다면, 그것은 매우 간단합니다
<SYNC Start=1703000><P Class=KRCC>실제로 RDS console에서 몇 번의 클릭으로 MySQL 스냅샷 혹은 모든 데이터베이스를 Aurora로 이관할 수 있습니다
<SYNC Start=1711000><P Class=KRCC>만약 MySQL 또는 MariaDB 나 Percona같은 다른 MySQL을 EC2나 on-premise에서의 실행한다면,
<SYNC Start=1719000><P Class=KRCC>Percona extra backup 같은 것을 사용해서 스냅샷을 찍고, 그 스냅샷을 S3 버켓에 넣고,
<SYNC Start=1728000><P Class=KRCC>Aurora 인스턴스로 스냅샷의 binary ingestion을 할 수 있습니다
<SYNC Start=1733000><P Class=KRCC>만약 EC2나 on-premise나 RDS에서 오라클이나 SQL server를 실행하고 있다면, 
<SYNC Start=1739000><P Class=KRCC>오라클이나 SQL server, 어떤 다른 MySQL 아닌 데이터베이스로부터 Aurora로 이전하는 것을 도와주는 스키마 전환 도구와 데이터베이스 이전 도구를 가지고 있습니다
<SYNC Start=1753000><P Class=KRCC>MySQL과 AWS 에코시스템면에서, 우리가 MySQL와 호환됨으로 한가지 장점은 어떤 MySQL화된 어플리케이션은 Aurora에서 어떤 변화도 없이 거의 실행된다는 것입니다
<SYNC Start=1775000><P Class=KRCC>우리는 또한 AWS 에코시스템과 매우 잘 통합되어져 있습니다
<SYNC Start=1779000><P Class=KRCC>제가 조금 말씀 드렸지만, Aurora로 아주 잘 통합되어진 많은 다른 서비스들이 있습니다
<SYNC Start=1784000><P Class=KRCC>Aurora를 이용할 때, MySQL 에코시스템과 AWS 에코시스템 둘 다를 이용할 수 있습니다
<SYNC Start=1793000><P Class=KRCC>이것은 실제 한가지 예입니다. 우리는 최근 lambda와 통합했습니다
<SYNC Start=1798000><P Class=KRCC>그래서 우리는 Aurora 밖에서 lambda 이벤트를 작동할 수 있습니다
<SYNC Start=1802000><P Class=KRCC>이것은 lambda를 이용하여 이벤트 기반 데이터 pipeline을 만들 수 있는 예입니다
<SYNC Start=1808700><P Class=KRCC>이것과 같은 많은 예들이 있습니다
<SYNC Start=1810000><P Class=KRCC>실제로 best practice 대한 Aurora 세션이 있고, 그 세션에서 이것의 몇 가지 예들을 보여드릴 겁니다


<SYNC Start=1816000><P Class=KRCC>feature, 기능 등 면에서 모든 것이 좋습니다
<SYNC Start=1820000><P Class=KRCC>그렇다면 그것은 실제로 돈을 절약할 수 있을까요? 이것은 많은 사람들이 저에게 질문하는 것입니다
<SYNC Start=1826000><P Class=KRCC>만약 상용 데이터베이스와 비교한다면, 물론, 비교할 것도 없습니다. Oracle이나 SQL server 가격의 10분의 1입니다
<SYNC Start=1836000><P Class=KRCC>놀라운 것은 우리는 많은 경우에서 MySQL조차 보다 더 저렴합니다
<SYNC Start=1843000><P Class=KRCC>어떻게 그렇냐고 저에게 물을 것입니다. 이것은 RDS에서의 MySQL 배치입니다
<SYNC Start=1850000><P Class=KRCC>Primary와 standby가 다수의 AZ에서 실행되고 있고,
<SYNC Start=1858000><P Class=KRCC>10K IOPS의 6TB 스토리지 볼륨이 각각 붙어 있습니다. 2개의 읽기 replica를 가지고 있습니다
<SYNC Start=1865000><P Class=KRCC>이 솔루션의 가격은 3년 RI로 한 시간당 총 가격은 13달러 62 센트였습니다
<SYNC Start=1878000><P Class=KRCC>만약 Aurora로 간다면, 이것들이 절약할 수 있는 것들입니다
<SYNC Start=1882000><P Class=KRCC>읽기 replica는 승격될 수 있습니다
<SYNC Start=1885000><P Class=KRCC>그래서 아무 것도 하지 않고 시스템 failover만 일어나기만 기다리고 있는 유휴 standby는 필요하지 않습니다
<SYNC Start=1890000><P Class=KRCC>그래서 인스턴스 하나를 제거할 수 있습니다
<SYNC Start=1893000><P Class=KRCC>두번째, 그것은 공유된 스토리지 볼륨입니다
<SYNC Start=1895000><P Class=KRCC>Primary, standby, 읽기 replica를 위한 여러 개의 분할된 스토리지 볼륨이 필요하지 않습니다. 하나면 충분합니다
<SYNC Start=1904000><P Class=KRCC>세번째, 우리는 훨씬 적은 I/O 를 발생시킵니다

<SYNC Start=1907000><P Class=KRCC>우리는 provisioned I/O가 아닌 사용된 I/O에 대해 청구하기 때문에 절약할 수 있습니다
<SYNC Start=1913000><P Class=KRCC>그래서 이 특정한 배치에서 이 모든 세가지로부터의 절약은 대략적으로 31 퍼센트 입니다
<SYNC Start=1920000><P Class=KRCC>여러 경우에 더 나은 성능 덕분에 더 작은 버전이나 작은 사이즈의 인스턴스를 이용할 수 있습니다
<SYNC Start=1927000><P Class=KRCC>가끔 다수의 데이터베이스를 하나로 합칠 수 있습니다
<SYNC Start=1932000><P Class=KRCC>만약 이 예시에, 이것을 고려해본다면, 약 50 퍼센트 절감에 가까울 것입니다
<SYNC Start=1937820><P Class=KRCC>이것은 우리가 그냥 보여주는 것이 아닙니다
<SYNC Start=1941000><P Class=KRCC>어떻게 그들이 돈을 절약했는지에 대해 발표해온 고객들이 많이 있습니다
<SYNC Start=1947000><P Class=KRCC>Safe Software를 예로 들자면, 40 퍼센트를 절약했고, Doublw Down Interactive는 67퍼센트 절감했습니다
<SYNC Start=1953000><P Class=KRCC>게다가 MySQL를 했을 때 보다 더 낮은 cpu 사용률을 보고 있습니다
<SYNC Start=1959000><P Class=KRCC>많은 사람들로부터 들었던 요청은 r3.large가 dev/test 하기에 너무 비싸다는 것이었습니다
<SYNC Start=1967000><P Class=KRCC>그것에 대해 좋은 소식은 우리는 대략적으로 r3.large 가격의 25 퍼센트, 30 퍼센트인 t2.medium을 발표하였습니다
<SYNC Start=1978000><P Class=KRCC>그래서 그것을 dev/test에 이용할 수 있습니다
<SYNC Start=1983000><P Class=KRCC>몇가지 관심 있을 다른 세션들이 있습니다
<SYNC Start=1985000><P Class=KRCC>제가 얘기 했던 많은 기술들에 대해 더 깊이 들어간 세션이 목요일에 있고, best practice 세션이 수요일에 있습니다
<SYNC Start=2000000><P Class=KRCC>그 시간에 우리는 어떻게 Aurora를 이용하는지, 어떻게 이전하는지, 어떻게 lambda와 다른 서비스들을 통합하는지에 대한 것을 이야기 하겠습니다
<SYNC Start=2010000><P Class=KRCC>어떻게 Aurora와 다양한 다른 실용적인 어플리케이션들을 이용하는 지에 대한 두 워크샵 또는 두 옵션이 있습니다
<SYNC Start=2020000><P Class=KRCC>만약 더 많은 질문이 있다면, 우리의 매우 친절한 Aurora 팀이 돕기 위해 여기에 있고, 우리에게 마음 놓고 이메일을 보내도 괜찮습니다
<SYNC Start=2030000><P Class=KRCC>우리는 또한 여기 있어서, 우리에게 올 수도 있고, 시간을 예약할 수도 있습니다
<SYNC Start=2036000><P Class=KRCC>부디 그렇게 해주시고, 이제 어떻게 티켓 마스터가 Aurora를 이용하는지에 대해 이야기하기 위해 린다에게 넘기겠습니다.

<SYNC Start=2057000><P Class=KRCC>고맙습니다, 벤자민
<SYNC Start=2058000><P Class=KRCC>모두들 안녕하세요
<SYNC Start=2059000><P Class=KRCC>제 이름은 린다 슈이고, 저는 티켓 마스터의 수석 아키텍트입니다
<SYNC Start=2065000><P Class=KRCC>저는 20년의 데이터베이스 경험을 가지고 있고, 저는 여기에서 Aurora를 이용하는 Ticketmaster 이야기를 나눌 수 있게 되어 매우 기쁩니다
<SYNC Start=2075000><P Class=KRCC>제가 시작하기전에, 우리 회사에 대해서 이야기 하겠습니다
<SYNC Start=2080000><P Class=KRCC>우리 회사는 40년이 되었습니다
<SYNC Start=2083000><P Class=KRCC>애리조나주 대학교에서 1976년도에 설립되었고, 20년 전, 1996년도에 ticketmaster.com이 출시되었습니다
<SYNC Start=2094000><P Class=KRCC>2010년에 Live Nation과 Ticketmaster가 합병했고, 2013년에 우리는 모든 혁신이 있었습니다
<SYNC Start=2103000><P Class=KRCC>우리 회사에 변화가 일어났고, 우리는 우리의 재판매 플랫폼을 출시하였습니다
<SYNC Start=2106000><P Class=KRCC>우리는 우리의 40년 기술을 보기 시작했고, 그것들을 더 새롭고 모던한 기술로 전환시키기 위해 찾았습니다
<SYNC Start=2113000><P Class=KRCC>네. 우리는 많은 돈을 법니다. 저 숫자들을 보세요. 우리는 탑 5 전자상거래 사이트입니다
<SYNC Start=2120000><P Class=KRCC>저는 이 슬라이드를 좋아합니다
<SYNC Start=2122500><P Class=KRCC>세계 곳곳에서는 매 20분마다 Live Nation 이벤트가 일어납니다
<SYNC Start=2127000><P Class=KRCC>우리는 잊지 못할 기쁨의 순간들을 제공합니다. 저는 여러분들이 저런 경험들을 모두 갖길 바랍니다
<SYNC Start=2136000><P Class=KRCC>저것들은 작년에 Live Nation의 숫자 몇 가지 입니다
<SYNC Start=2142000><P Class=KRCC>우리는 4억6천5백만 티켓들을 작년에 판매했습니다
<SYNC Start=2148000><P Class=KRCC>그리고 우리는 5억 3천 팬들을 가지고 있고, 37개 국가에 모든 우리의 플랫폼을 가지고 있습니다
<SYNC Start=2154000><P Class=KRCC>우리의 데이터 베이스에 1억 4천5백만 고객들을 가지고 있고,
<SYNC Start=2159000><P Class=KRCC>2천1백만 모바일 앱 다운로드가를 작년에 있었습니다
<SYNC Start=2163000><P Class=KRCC>모두가 놀라운 숫자들입니다
<SYNC Start=2168000><P Class=KRCC>오늘날 제공되는, 우리의 private 클라우드에 의해 제공되는 숫자입니다
<SYNC Start=2171000><P Class=KRCC>우리는 그러한 private 클라우드에서 실행하는 수백개의 Ticketmaster 파트들을 가지고 있습니다
<SYNC Start=2178000><P Class=KRCC>우리는 수천대, 수만대의 서버들을 가지고 있습니다
<SYNC Start=2181000><P Class=KRCC>그들 중 대부분은 가상의 머신이고, 몇몇은 bare-metal들이고, 몇몇은 데이터베이스가 돌아가는 bare-metal입니다
<SYNC Start=2187000><P Class=KRCC>우리는 다수의 데이터 센터를 가지고 있고, 우리는 1000개 넘는 데이터베이스를 가지고 있습니다
<SYNC Start=2194000><P Class=KRCC>그것은 MySQL, 오라클, mongodb, Teradata, Microsoft SQL Server and PostgreSQL를 포함합니다
<SYNC Start=2203000><P Class=KRCC>시장의 거의 대부분의 관계형 데이터베이스를 가지고 있습니다
<SYNC Start=2207000><P Class=KRCC>여기 우리의 도전과제가 있습니다
<SYNC Start=2210000><P Class=KRCC>지난 주는 블랙 프라이데이였습니다
<SYNC Start=2211000><P Class=KRCC>저는 얼마나 많은 사람들이 블랙 프라이데이에 가는 지 모릅니다
<SYNC Start=2214000><P Class=KRCC>그래서 Ticketmaster의 티켓 판매는 블랙프라이데이입니다
<SYNC Start=2219900><P Class=KRCC>매일이 블랙 프라이데이 같습니다

<SYNC Start=2222000><P Class=KRCC>우리는 티켓 수요에서 거대한 스파이크가 있었습니다
<SYNC Start=2225000><P Class=KRCC>우리는 세계적인 회사입니다. 우리는 다수의 지역에서 운영합니다
<SYNC Start=2229000><P Class=KRCC>그래서 그런 스파이크는 우리는 언제든지 칠 수 있습니다
<SYNC Start=2231000><P Class=KRCC>우리는 비욘세 티켓이나 작년의 아델 티켓 판매처럼 제한된 인벤토리를 가지고 있습니다
<SYNC Start=2240000><P Class=KRCC>우리는 다수의 판매 채널을 가지고 있습니다
<SYNC Start=2242000><P Class=KRCC>이것은 한 판매일의 그림입니다
<SYNC Start=2247000><P Class=KRCC>트래픽이 우리를 치는 것을 볼 수 있습니다
<SYNC Start=2250000><P Class=KRCC>그것은 0부터 1억 5천 트랜잭션, 꼭대기까지 몇 분 안에 올라갈 수 있습니다
<SYNC Start=2255000><P Class=KRCC>그래서 그것들은 오늘날 우리에게 커다란 도전이었습니다
<SYNC Start=2260000><P Class=KRCC>그 스파이크는 실제로 우리의 front-end의 proxy 어플리케이션 서버으로부터 데이터베이스까지 연결됩니다
<SYNC Start=2269000><P Class=KRCC>오늘날 우리의 프레임에서 우리는 MySQL를 비중있게 사용합니다
<SYNC Start=2275000><P Class=KRCC>약 1000 데이터베이스 중에서 반도 넘는 것이 MySQL입니다
<SYNC Start=2278000><P Class=KRCC>저것은 우리를 저 판매 트래픽에서 살아남을 수 있도록 도와준 두가지 특정한 MySQL 셋업입니다
<SYNC Start=2286200><P Class=KRCC>타입 1은 active-passsive 셋업입니다
<SYNC Start=2289000><P Class=KRCC>우리는 다수의 데이터 센터를 가지고 있습니다.우리는 두 곳의 데이터센터를 가지고 있습니다
<SYNC Start=2292000><P Class=KRCC>우리는 active 어플리케이션의 주된 사용으로 하나의 복제 세트를 사용합니다
<SYNC Start=2298000><P Class=KRCC>그리고 다른 것은 failover를 서포트하기 위해 전체를 모방한 standby 세트입니다
<SYNC Start=2304000><P Class=KRCC>타입 2는 거대한 4단계 레이어의 복제 세트입니다
<SYNC Start=2309000><P Class=KRCC>많은 판매 트래픽 패턴을 견디기 위한 셋업입니다
<SYNC Start=2312000><P Class=KRCC>판매가 곧 온다는 것을 알면, 우리가 견딜수 있을지 수용력을 평가합니다
<SYNC Start=2321000><P Class=KRCC>그리고 그것을 서포트하기 위해 더 많은 노드들을 추가합니다
<SYNC Start=2325000><P Class=KRCC>그래서 이것이 우리가 오늘 직면하는 과제입니다
<SYNC Start=2329000><P Class=KRCC>첫번째로, 확장성 입니다
<SYNC Start=2331000><P Class=KRCC>특정한 셋업에서, 더 많은 읽기 replica를 추가하는데 약 4시간이나 혹은 더 많은 시간이 걸릴 수도 있습니다
<SYNC Start=2340000><P Class=KRCC>가끔씩 hardware 제한이 있기 때문에 구매하기 진행하기도 하는데 이것은 수 주가 걸리기도 합니다
<SYNC Start=2349000><P Class=KRCC>그래서 우리는 스파이크에서 보는 트래픽을 서포트 하기 위해 최대 용량을 만들었습니다
<SYNC Start=2359000><P Class=KRCC>우리는 이 스파이크를 살아남길 원합니다
<SYNC Start=2364000><P Class=KRCC>스케일이 어렵기 때문에, 우리는 최대 용량으로 유지합니다

<SYNC Start=2367000><P Class=KRCC>MySQL을 이용함으로 맞는 다른 도전과제는 복제 랙입니다
<SYNC Start=2372000><P Class=KRCC>데이터베이스에서 DBA로 오랜 시간 있으면서, 많은 엔지니어들이 MySQL 복제가 얼마나 빠른지 물었습니다
<SYNC Start=2382000><P Class=KRCC>이것은 정말 힘든 얘기입니다
<SYNC Start=2384000><P Class=KRCC>저는 여러분에게 그것은 빠르다고 말씀 드릴 수 있으나, 그것을 컨드롤할 수 는 없습니다
<SYNC Start=2387500><P Class=KRCC>만약 그들이 이용하는 MySQL이 binary log 복제라면, 그것은 모든 트랜잭션을 slave에 반복재생합니다
<SYNC Start=2395000><P Class=KRCC>만약 다수의 slave가 있다면, 각각의 slave는 다른 속도로 재생됩니다
<SYNC Start=2399000><P Class=KRCC>또한, 그것은 single thread 입니다
<SYNC Start=2401500><P Class=KRCC>만약 어플리케이션이 큰 트랜잭션을 던지면, 얼마나 걸릴지 모릅니다
<SYNC Start=2407000><P Class=KRCC>두 시간이 걸릴 수도 있고, 수분이 걸릴 수 도 있습니다
<SYNC Start=2411000><P Class=KRCC>저는 전체 트랜잭션을 완료하는데 8시간이 걸렸던 악몽이 있습니다
<SYNC Start=2420000><P Class=KRCC>그것은 모든 slave에 연결됩니다
<SYNC Start=2422000><P Class=KRCC>복제 랙은 커다란 도전 과제입니다
<SYNC Start=2425000><P Class=KRCC>복제 랙은 읽기 일관성 과제를 야기 시킵니다
<SYNC Start=2429000><P Class=KRCC>어떤 어플리케이션의  읽기가 어느 slave에 영향을 준다면, 그 특정 시간 동안, 복제 랙 때문에 다른 데이터 복사본을 가지고 올 수도 있습니다

<SYNC Start=2439000><P Class=KRCC>다른 도전 과제는 우리의 운영입니다
<SYNC Start=2442000><P Class=KRCC>이전의 그림에서, 이 active-passive 셋업을 보여드렸습니다
<SYNC Start=2447000><P Class=KRCC>장애가 있을 때, 우리는 데이터센터 중 하나를 유지 보수하기 원합니다
<SYNC Start=2452000><P Class=KRCC>failover 과정은 수동입니다
<SYNC Start=2455000><P Class=KRCC>우리는 다수의 팀이 복제 포인트를 새로운 active 노드로 전환시켜주고, 수동 failover를 진행합니다
<SYNC Start=2464000><P Class=KRCC>가끔 그것은 30분이 걸리기도 하고, 어떨 땐 더 오래 걸리기도 합니다
<SYNC Start=2467000><P Class=KRCC>우리는 정전을 대비해 이것을 요구 받았습니다
<SYNC Start=2470000><P Class=KRCC>그래서 이것은 도전 과제 중 하나입니다
<SYNC Start=2472000><P Class=KRCC>Multi master 셋업의 유지보수도 같은 과정으로 진행합니다
<SYNC Start=2476500><P Class=KRCC>그것은 정말 힘듭니다
<SYNC Start=2478000><P Class=KRCC>버전 업그레이드는 다수의 복제 세트를 찾는 우리에게 악몽이 될 수 있습니다. 그들은 많은 마이너 버전을 가지고 있습니다.
<SYNC Start=2483000><P Class=KRCC>무엇보다 MySQL은 많은 마이너 버전을 가지고 있습니다
<SYNC Start=2488000><P Class=KRCC>우리는 DBA 팀이 많은 시간을 어떤 것이 안정된 것인지 찾는 데에 시간을 보냅니다
<SYNC Start=2492000><P Class=KRCC>적당한 버전을 찾고 나면 업그레이드 순서를 계획해야 합니다
<SYNC Start=2498000><P Class=KRCC>전체 업그레이드를 마치기 위해 그것은 6개월짜리 프로젝트일 수도 있고, 더 걸릴 수도 있습니다
<SYNC Start=2506000><P Class=KRCC>이 모든 것들은 데이터베이스에 대한 도전 과제 입니다
<SYNC Start=2511000><P Class=KRCC>우리는 다른 쪽으로도 도전과제를 당면하게 되었습니다
<SYNC Start=2513000><P Class=KRCC>연초에 우리 회사는 플랫폼을 간소하게 하기 원해서 찾기 시작하였습니다
<SYNC Start=2519000><P Class=KRCC>우리는 플랫폼을 간소화 하고 싶었습니다
<SYNC Start=2521000><P Class=KRCC>우리는 자율적인 상품 팀을 가질 수 있었습니다
<SYNC Start=2524000><P Class=KRCC>우리의 상품을 더 빠르게 배송하면, 더 나은 상품과 질을 고객들에게 제공할 수 있습니다
<SYNC Start=2536000><P Class=KRCC>더 많은 수익과 더 많은 시장 점유율을 가질 수 있습니다
<SYNC Start=2539000><P Class=KRCC>이것이 Ticketmaster가 private 클라우드에서 public 클라우드로 옮긴 이유입니다
<SYNC Start=2546000><P Class=KRCC>우리는 아마존이 제일 도움이 될 것이라고 믿었습니다, 그래서 많은 MySQL 서버를 Aurora로 옮겼습니다

<SYNC Start=2554000><P Class=KRCC>맞습니다.우리는 클라우드로 옮겼습니다
<SYNC Start=2556000><P Class=KRCC>그럼 왜 우리는 Aurora를 선택했을까요?
<SYNC Start=2560000><P Class=KRCC>데반잔이 벌써 Aurora를 이용하는 좋은 혜택들에 대해 말했습니다
<SYNC Start=2565000><P Class=KRCC>저는 무엇이 Ticketmaster에게 중요한지에 대해 강조하겠습니다

<SYNC Start=2569000><P Class=KRCC>첫번째로, 호환성입니다
<SYNC Start=2572000><P Class=KRCC>우리는 많은 상품들을 MySQL에서 진행하고 있습니다
<SYNC Start=2576000><P Class=KRCC>MySQL 5.6을 이용하는 어플리케이션들이 완전히 호환된다는 것을 발견했습니다
<SYNC Start=2582000><P Class=KRCC>그래서 그 상품들을 우리가 Aurora로 이전하려 결심했을 때, 최소의 컨트롤 비용이 엔지니어링 팀에게 부과되었습니다
<SYNC Start=2589000><P Class=KRCC>또한, MySQL에서 Aurora로 이전하는 것은 너무나도 쉬웠습니다
<SYNC Start=2596000><P Class=KRCC>MySQL 복제만 셋업하면 되었습니다.
<SYNC Start=2599000><P Class=KRCC>전환은 무척 순조로웠습니다
<SYNC Start=2601000><P Class=KRCC>우리는 복제 그룹을 셋업할 수 있었습니다. Aurora 클러스터에서 on-premise MySQL 서버로 two-way 방식의 복제였습니다
<SYNC Start=2609000><P Class=KRCC>복제가 준비되었을 때, 바꿀 수 있습니다
<SYNC Start=2611000><P Class=KRCC>그래서 그것은 매우 순조로웠습니다
<SYNC Start=2613000><P Class=KRCC>우리는 오라클 상품들도 Aurora로 옮겼습니다
<SYNC Start=2619000><P Class=KRCC>그것을 옮기는 것도, 매우 간단했습니다. 데이터 이전 서비스와 스키마 전환 툴을 이용할 수 있었습니다

<SYNC Start=2627500><P Class=KRCC>두번째로, 쉬운 운영입니다
<SYNC Start=2631000><P Class=KRCC>맞습니다.우리는 쉬운 운영을 사랑합니다
<SYNC Start=2633000><P Class=KRCC>Aurora가 복제 셋업을 관리합니다
<SYNC Start=2637000><P Class=KRCC>복제를 셋업하기 위해 마스터를 메뉴 스텝들로 바꿀 필요가 없습니다
<SYNC Start=2642000><P Class=KRCC>우리는 우리의 데이터베이스를 scale-out하기 원하기 때문에, 읽기와 쓰기 end-point를 사랑합니다
<SYNC Start=2648000><P Class=KRCC>MySQL RDS나 MySQL EC2를 사용한다면, DNS나 Route 53를 직접 처리해야 하는 것을 발견했습니다
<SYNC Start=2657000><P Class=KRCC>노드를 더 추가할 때, 어플리케이션에게 우리가 더 많은 노드를 추가한다고 알려줘야 하기 때문에 그런 구조를 고려해야 합니다
<SYNC Start=2665000><P Class=KRCC>Aurora를 이용하면 그들이 관리합니다. Route 53, cname이나 어느 것도 바꿀 필요가 없습니다
<SYNC Start=2673500><P Class=KRCC>조율된 parameter
<SYNC Start=2674500><P Class=KRCC>그것은 우리가 사랑하는 또 다른 하나입니다
<SYNC Start=2676500><P Class=KRCC>MySQL을 이용하는 사람들은 많은 parameter를 검토해야 합니다
<SYNC Start=2682000><P Class=KRCC>Aurora는 거의 조율된 parameter를 제공합니다
<SYNC Start=2686000><P Class=KRCC>그래서 어떤 것이 맞는 것인지 찾기 위해 parameter를 검토할 필요가 없습니다
<SYNC Start=2691000><P Class=KRCC>캐릭터 세팅같은 몇개만 바꾸고 이용할 수 있습니다
<SYNC Start=2696000><P Class=KRCC>Utf-8이나 어떤 종류의 collation 세팅을 이용할지만 정하면 됩니다
<SYNC Start=2700000><P Class=KRCC>그래서 우리는 오직 우리가 신경 쓰는 것에 대해서만 집중할 수 있습니다
<SYNC Start=2703000><P Class=KRCC>그것은 큰 장점입니다
<SYNC Start=2707000><P Class=KRCC>마지막은 자동 마이너 버전 업그레이드입니다
<SYNC Start=2712000><P Class=KRCC>우리는 6개월짜리 업그레이드를 할 필요가 없습니다
<SYNC Start=2715000><P Class=KRCC>그것은 버튼 클릭입니다
<SYNC Start=2717000><P Class=KRCC>그들이 모든 마이너 버전 업그레이드를 관리하고, 단지 할 일은 버튼 클릭, 그러면 업그레이드입니다

<SYNC Start=2724000><P Class=KRCC>세번째로 우리에게 가장 중요한 것은 확장성입니다
<SYNC Start=2729000><P Class=KRCC>Ticketmaster 패턴처럼 트랙픽을 보여드렸습니다
<SYNC Start=2732000><P Class=KRCC>트래픽이 와서 우리를 치면 아마도 그것은 한시간 정도만 지속됐다가 내려갈 것입니다
<SYNC Start=2737000><P Class=KRCC>그래서 오늘 우리의 프레임에는 최대의 수용성을 만듭니다
<SYNC Start=2742000><P Class=KRCC>대부분의 시간 동안 그것은 대기하고 가동되어지지 않습니다
<SYNC Start=2747000><P Class=KRCC>Aurora를 이용하면 빠르게 스케일 할 수 있고, 트래픽이 가고나면, 우리는 다시 줄어듭니다
<SYNC Start=2755000><P Class=KRCC>더 많은 CPU와 메모리를 추가하는 수직적 스케일은 인스턴스 타입을 바꿈으로 할 수 있습니다
<SYNC Start=2762000><P Class=KRCC>수평적 스케일 하는 것은 우리가 제일 좋아하는 것입니다
<SYNC Start=2767000><P Class=KRCC>특별한 스토리지 셋업 때문에, 매번 추가적인 노드를 추가할 때 스토리지가 거기에 있습니다
<SYNC Start=2773000><P Class=KRCC>만약 추가적인 노드가 부가된 거대한 데이터베이스가 있다면, 실제로 인스턴스를 제공하는 시간만 필요합니다
<SYNC Start=2780000><P Class=KRCC>데이터를 복사할 필요가 없습니다
<SYNC Start=2782000><P Class=KRCC>우리는 안정성 테스트를 내부적으로 합니다
<SYNC Start=2784000><P Class=KRCC>우리의 테스트에서, Aurora를 더 많은 주 동안 실행하며, 다수의 테스트를 했습니다
<SYNC Start=2791000><P Class=KRCC>노드를 추가하는 것을 보았고, 스케일은 약 10분이 걸려서 완료됩니다
<SYNC Start=2795500><P Class=KRCC>놀랍습니다

<SYNC Start=2797000><P Class=KRCC>스토리지
<SYNC Start=2798700><P Class=KRCC>우리를 위해 그들이 자동적으로 관리하며, 모니터링할 필요가 없습니다.
<SYNC Start=2802000><P Class=KRCC>스토리지 중에 하나를 다 써가고 있네! 80퍼센트나 쓰고 있어서 용량을 추가해 줘야겠네!
<SYNC Start=2809000><P Class=KRCC>더 이상 이렇게 말할 필요가 없습니다
<SYNC Start=2810000><P Class=KRCC>그것은 Aurora에 의해 자동적으로 관리됩니다. 훌륭합니다

<SYNC Start=2814000><P Class=KRCC>우리의 성공적인 이야기
<SYNC Start=2816000><P Class=KRCC>계정 관리
<SYNC Start=2818000><P Class=KRCC>계정 관리는 우리 티켓 마스터의 상품 중 하나입니다
<SYNC Start=2823000><P Class=KRCC>그것은 content management system 입니다
<SYNC Start=2825000><P Class=KRCC>그들은 약 800 종류를 제공하고, 약 수백, 수천의 일상 이벤트를 매일 관리합니다
<SYNC Start=2834000><P Class=KRCC>사이트에서 티켓을 찾고, 티켓을 프린트하고, 티켓을 팔고, 이체하는 팬들이 있습니다
<SYNC Start=2843000><P Class=KRCC>그래서 그것은 매우 중요한 상품이고, 그들은 8월 초에 아마존으로 이전하는 것을 완료했습니다
<SYNC Start=2851000><P Class=KRCC>아마존으로 옮기기 전에는, 그들은 MySQL 서버를 이용하였습니다
<SYNC Start=2855000><P Class=KRCC>지금 그들은 Aurora으로 이전했습니다
<SYNC Start=2857500><P Class=KRCC>그 이후에는 보고된 문제가 없습니다
<SYNC Start=2862000><P Class=KRCC>Live 환경에서, 복제 랙이 20 밀리세컨드 정도로 일정하게 유지되고 있습니다
<SYNC Start=2868000><P Class=KRCC>이전하기 전에, 계정 관리는 MySQL 서버 12대를 사용했습니다
<SYNC Start=2873000><P Class=KRCC>우리가 이전할 때는, 같은 스펙의 Aurora로 시작했습니다
<SYNC Start=2878000><P Class=KRCC>지금은 2 종류의 Aurora 5개 노드를 이용하는 중입니다
<SYNC Start=2882000><P Class=KRCC>튜닝작업을 통해 더 작은 사이즈의 Aurora 인스턴스 타입으로 내릴 수 있을 거라고 확신하고 있습니다

<SYNC Start=2892000><P Class=KRCC>릴리즈 시간
<SYNC Start=2895000><P Class=KRCC>Aurora로 옮기기 전, 릴리즈 시간은 마치려면 약 한시간에서 두시간이 걸렸습니다
<SYNC Start=2900000><P Class=KRCC>지금은 20분 입니다. 놀랍습니다
<SYNC Start=2904000><P Class=KRCC>private 클라우드 환경에서 테스트 환경을 만드는 것도 아마 일주일은 걸립니다
<SYNC Start=2910000><P Class=KRCC>그것은 여러 리소스를 사용할 수 있어야합니다
<SYNC Start=2913000><P Class=KRCC>지금은 app stack에서 데이터베이스까지 30분밖에 안 걸립니다
<SYNC Start=2917000><P Class=KRCC>테스트 환경을 실행하고, 테스트하고, 없애는 데까지 30분이면 됩니다
<SYNC Start=2924000><P Class=KRCC>놀랍습니다
<SYNC Start=2926000><P Class=KRCC>우리가 MySQL 5.6에서 Aurora로 옮겼을 때, 아무런 코드 변화가 없었습니다
<SYNC Start=2936000><P Class=KRCC>그것은 전부 호환되었습니다. 우리는 그것을 너무 사랑합니다
<SYNC Start=2940000><P Class=KRCC>여기에 우리가 사용하는 도구들이 있습니다
<SYNC Start=2943000><P Class=KRCC>아마존으로 이전할 때, Ticketmaster 는 데이터베이스를 포함한 모든 인프라를 코드로 관리했습니다
<SYNC Start=2951000><P Class=KRCC>우리는 모든 인프라를 관리하기 위한 오픈 소스 도구인 terraformer를 사용합니다
<SYNC Start=2959000><P Class=KRCC>우리는 Aurora를 관리하기 위해 terraformer 포멧을 제공합니다
<SYNC Start=2964000><P Class=KRCC>우리는 그것을 다운타임 없이, 10분 이내에 수평적으로 스케일 할 수 있습니다
<SYNC Start=2968000><P Class=KRCC>수직적 스케일을 하기 위해 인스턴스 타입을 바꿀 수 있습니다
<SYNC Start=2972000><P Class=KRCC>그렇게 하는 데에는 대략적으로 30초 failover 시간이 걸립니다
<SYNC Start=2978000><P Class=KRCC>어플리케이션들은 재접속 feature를 포함해서 만들어졌기 때문에, 1분내에 재접속을 할 수 있습니다
<SYNC Start=2987000><P Class=KRCC>만약 우리가 데이터베이스를 스케일업, 스케일다운 하기 원한다면, 그렇게 할 수 있다는 의미입니다
<SYNC Start=2993000><P Class=KRCC>아무런 다운 타임과 아무런 영향이 없습니다
<SYNC Start=2995000><P Class=KRCC>그래서 우리는 좋아합니다
<SYNC Start=2998000><P Class=KRCC>이것이 Ticketmaster의 모든 이야기입니다
<SYNC Start=3005000><P Class=KRCC>만약 질문이 있다면, QnA로 넘어가겠습니다


</BODY>
</SAMI>